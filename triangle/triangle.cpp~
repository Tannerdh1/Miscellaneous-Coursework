#include <cmath>
#include <GLFW/glfw3.h>

// use mouse location to change the color of a rotating triangle
int main() {

  // Initialize the library
  if (!glfwInit()) {
    return -1;
  }

  // Create a windowed mode window and its OpenGL context
  GLFWwindow* window = glfwCreateWindow(640, 480, "Triangle", NULL, NULL);
  if (!window) {
    glfwTerminate();
    return -1;
  }

  // Make the window's context current
  glfwMakeContextCurrent(window);

  // Loop until the user closes the window
  while (glfwGetKey(window, GLFW_KEY_ESCAPE) != GLFW_PRESS &&
         !glfwWindowShouldClose(window)) {

    // Set the rendering viewport location and dimensions
    int width, height;
    glfwGetFramebufferSize(window, &width, &height);
    glViewport(0, 0, width, height);
      
    // Clear the color buffer to black
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    glClear(GL_COLOR_BUFFER_BIT);

    // Select and setup the projection matrix
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    float ratio = width / (float) height;
    glOrtho(-ratio, ratio, -1.0f, 1.0f, 1.0f, -1.0f);

    // Select and setup the modelview matrix
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    //Five-pointed star
    
    /*
    glColor3f(0.0, 1.0, 1.0);
    glBegin(GL_LINE_LOOP);
    glVertex3f(1.0f, 0.0f, 1.0f);
    glVertex3f(cos(2.513f), sin(2.513f), 1.0f);
    glVertex3f(cos(5.027f), sin(5.027f), 1.0f);
    glVertex3f(cos(1.257f), sin(1.257f), 1.0f);
    glVertex3f(cos(3.77f), sin(3.77f), 1.0f);
    glVertex3f(1.0f, 0.0f, 1.0f);
    glEnd();
    */
    
    //Solid Five-pointed Star
    /*
    glColor3f(0.0, 1.0, 1.0);
    glBegin(GL_TRIANGLES);
    glVertex3f(1.0f, 0.0f, 1.0f);
    glVertex3f(-0.809f, 0.588f, 1.0f);
    glVertex3f(-0.12f, -0.36f, 1.0f);
    glEnd();
    glColor3f(0.0, 1.0, 1.0);
    glBegin(GL_TRIANGLES);
    glVertex3f(-.809f, -0.588f, 1.0f);
    glVertex3f(.309f, .951f, 1.0f);
    glVertex3f(0.2f, -0.26f, 1.0f);
    glEnd();
    glColor3f(0.0, 1.0, 1.0);
    glBegin(GL_TRIANGLES);
    glVertex3f(.309f, -0.951f, 1.0f);
    glVertex3f(.309f, 0.951f, 1.0f);
    glVertex3f(-0.2f, -0.26f, 0.0f);
    glEnd();
    */

    
    //Filled, Five-pointed Star using glDrawElements
    static GLfloat vertices[] = {0.0, 0.0, 1.0,
                                 1.0, 0.0, 1.0,
				 0.324, 0.235, 1.0,
				 0.309, 0.951, 1.0,
				 -0.124, 0.380, 1.0,
				 -0.809, 0.588, 1.0,
				 -0.4, 0.0, 1.0,
				 -0.809, -0.588, 1.0,
				 -0.124, -0.380, 1.0,
				 0.309, -0.951, 1.0,
				 0.324, -0.235, 1.0};
    
    static GLfloat colors[] = {0.0, 1.0, 1.0,
                          0.0, 1.0, 1.0,
                          0.0, 1.0, 1.0,
                          0.0, 1.0, 1.0,
                          0.0, 1.0, 1.0,
                          0.0, 1.0, 1.0,
			  0.0, 1.0, 1.0,
			  0.0, 1.0, 1.0,
			  0.0, 1.0, 1.0,
			  0.0, 1.0, 1.0,
			  0.0, 1.0, 1.0};

    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState (GL_COLOR_ARRAY); 
    glColorPointer (3, GL_FLOAT, 0, colors);
    glVertexPointer (3, GL_FLOAT, 0, vertices);
    GLint allIndices[] = {0, 1, 2,
			  0, 2, 3,
			  0, 3, 4,
			  0, 4, 5,
			  0, 5, 6,
			  0, 6, 7,
			  0, 7, 8,
			  0, 8, 9,
			  0, 9, 10,
			  0, 10, 1};
    glScalef(0.1, 0.1, 1.0);
    glTranslatef(6.0, 0.0, 0.0);
    glRotatef(180, 0, 0, 1);
    glDrawElements(GL_TRIANGLES, 30, GL_UNSIGNED_INT, allIndices);
    
    // Swap front and back buffers
    glfwSwapBuffers(window);

    // Poll for and process events
    glfwPollEvents();
  }

  // Clean up
  glfwDestroyWindow(window);
  glfwTerminate();

  return 0;
}
