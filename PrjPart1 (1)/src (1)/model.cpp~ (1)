#include <vector>
#include <fstream>
#include <model.h>
#include <string>
#include <iostream>

namespace engine{

  static GLfloat vertices[] = {};
  Glint allIndices[] = {};

  Model::Model(){
  }

  Model::Model(const std::string &filename){
    Load(filename);
  }

  void Model::Load(const std::string &filename){
    std::string var1;
    std::ifstream file(filename);

    if(!file.is_open()){
      std::cout << "This file doesn't exist";
      return;
    }
    if(filename == null){
      std::cout << "Nothing in the obj file";
    }
    while(!filename.eof()){
      if(line[0] == 'v'){
        file >> var1;
	while(typeof(var1) == 'int' && !file.eof()){
	  vertex.push_back(stof(var1));
	  file >> var1;
	}
      }
      else if(line[0] == 'f'){
        file >> var1;
	while(typeof(var1) == 'float' && !file.eof()){
	  allIndices.push_back(stof(var1));
	  file >> var1;
	}
      }
      else{
	return;
      }
    }
    for(int = 0; i<vertex.Indices.size(0); i++){
      int vertexIndex = vertexIndices[i];
      glm::vec3 vertex = temp_vertices[vertexIndex-1];
      
    }
  }
  void Model::Draw(){
    glEnableClientState(GL_VERTEX_ARRAY);				        
    glEnableClientState(GL_NORMAL_ARRAY);
    glVertexPointer(3,GL_FLOAT,0,Faces_Triangles);		        
    glNormalPointer(GL_FLOAT,0,normals);				        
    glDrawArrays(GL_TRIANGLES, 0,TotalConnectedTriangles);
  }
}
